# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='protocol.proto',
  package='tutorial',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=_b('\n\x0eprotocol.proto\x12\x08tutorial\"F\n\x04Peer\x12\r\n\x05\x66r_ip\x18\x01 \x02(\t\x12\x0f\n\x07\x66r_port\x18\x02 \x02(\x05\x12\r\n\x05to_ip\x18\x03 \x02(\t\x12\x0f\n\x07to_port\x18\x04 \x02(\x05\"e\n\nP2PMessage\x12\n\n\x02\x66r\x18\x01 \x02(\t\x12\n\n\x02to\x18\x02 \x02(\t\x12\x0c\n\x04uuid\x18\x03 \x02(\t\x12\r\n\x03msg\x18\x04 \x01(\tH\x00\x12\x12\n\x08uuid_ack\x18\x05 \x01(\tH\x00\x42\x0e\n\x0ctype_message')
)




_PEER = _descriptor.Descriptor(
  name='Peer',
  full_name='tutorial.Peer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='fr_ip', full_name='tutorial.Peer.fr_ip', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fr_port', full_name='tutorial.Peer.fr_port', index=1,
      number=2, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='to_ip', full_name='tutorial.Peer.to_ip', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='to_port', full_name='tutorial.Peer.to_port', index=3,
      number=4, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=98,
)


_P2PMESSAGE = _descriptor.Descriptor(
  name='P2PMessage',
  full_name='tutorial.P2PMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='fr', full_name='tutorial.P2PMessage.fr', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='to', full_name='tutorial.P2PMessage.to', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='uuid', full_name='tutorial.P2PMessage.uuid', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='msg', full_name='tutorial.P2PMessage.msg', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='uuid_ack', full_name='tutorial.P2PMessage.uuid_ack', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type_message', full_name='tutorial.P2PMessage.type_message',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=100,
  serialized_end=201,
)

_P2PMESSAGE.oneofs_by_name['type_message'].fields.append(
  _P2PMESSAGE.fields_by_name['msg'])
_P2PMESSAGE.fields_by_name['msg'].containing_oneof = _P2PMESSAGE.oneofs_by_name['type_message']
_P2PMESSAGE.oneofs_by_name['type_message'].fields.append(
  _P2PMESSAGE.fields_by_name['uuid_ack'])
_P2PMESSAGE.fields_by_name['uuid_ack'].containing_oneof = _P2PMESSAGE.oneofs_by_name['type_message']
DESCRIPTOR.message_types_by_name['Peer'] = _PEER
DESCRIPTOR.message_types_by_name['P2PMessage'] = _P2PMESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Peer = _reflection.GeneratedProtocolMessageType('Peer', (_message.Message,), dict(
  DESCRIPTOR = _PEER,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:tutorial.Peer)
  ))
_sym_db.RegisterMessage(Peer)

P2PMessage = _reflection.GeneratedProtocolMessageType('P2PMessage', (_message.Message,), dict(
  DESCRIPTOR = _P2PMESSAGE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:tutorial.P2PMessage)
  ))
_sym_db.RegisterMessage(P2PMessage)


# @@protoc_insertion_point(module_scope)
